// Gradle script to build the RyzomConverter project

plugins {
    id 'application' // to build JVM applications
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(JavaCompile).configureEach { // Java compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_20)) {
        // Suppress warnings that source value 8 is obsolete.
        options.compilerArgs << '-Xlint:-options'
    }
    options.compilerArgs << '-Xlint:unchecked'
    //options.deprecation = true // to provide detailed deprecation warnings
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_10)) {
        options.release = 8
    }
}

tasks.withType(JavaExec).configureEach { // Java runtime options:
    args = ['../RyzomAssets']
    //args = ['../RyzomAssets', 'noanimations'] // to convert models only
    //args = ['../RyzomAssets', 'nomodels'] // to convert animations only
    classpath sourceSets.main.runtimeClasspath
    enableAssertions = true
    //jvmArgs '-verbose:gc'
    jvmArgs '-Xms4g', '-Xmx4g' // to enlarge the Java heap
}

application {
    mainClass = 'net.bithaven.jme.ryzom.RyzomConverter'
}

configurations.configureEach {
   resolutionStrategy.cacheChangingModulesFor 0, 'seconds' // to disable caching of snapshots
}

dependencies {
    implementation(libs.commons.io)
    compileOnly(libs.javax.annotation) // for Nonnull and Nullable

    implementation(libs.jme3.core)
    runtimeOnly(libs.jme3.desktop)

    // RyzomConverter doesn't use jme3-jogg nor jme3-plugins
    //  -- they are included solely to avoid warnings from AssetConfig.
    runtimeOnly(libs.jme3.jogg)
    runtimeOnly(libs.jme3.plugins)
}

// Register cleanup tasks:

clean.dependsOn('cleanWrittenAssets')

tasks.register('cleanWrittenAssets', Delete) { // output directory
    delete 'assets/ryzom-assets/export'
}
