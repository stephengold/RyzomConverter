// Gradle build script for the RyzomConverter project

plugins {
    id 'application'
}

ext.jme3Version = '3.6.1-stable' // current version of JMonkeyEngine

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(JavaCompile).configureEach { // Java compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    options.compilerArgs << '-Xlint:unchecked'
    //options.deprecation = true // to provide detailed deprecation warnings
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_10)) {
        options.release = 8
    }
}

tasks.withType(JavaExec).configureEach { // Java runtime options:
    args = ['../RyzomAssets']
    //args = ['../RyzomAssets', 'noanimations'] // to convert models only
    //args = ['../RyzomAssets', 'nomodels'] // to convert animations only
    classpath sourceSets.main.runtimeClasspath
    enableAssertions true
    //jvmArgs '-verbose:gc'
    jvmArgs '-Xms4g', '-Xmx4g' // to enlarge the Java heap
}

application {
    mainClass = 'net.bithaven.jme.ryzom.RyzomConverter'
}

configurations.configureEach {
   resolutionStrategy.cacheChangingModulesFor 0, 'seconds' // to disable caching of SNAPSHOTs
}
repositories {
    //mavenLocal() // to find libraries installed locally
    mavenCentral() // to find libraries released to the Maven Central repository
    //maven { url 'https://s01.oss.sonatype.org/content/groups/staging' } // to find libraries staged but not yet released
    //maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots' } // to find public SNAPSHOTs of libraries
}

dependencies {
    implementation 'org.apache.directory.studio:org.apache.commons.io:2.4'
    compileOnly 'org.realityforge.javax.annotation:javax.annotation:1.0.1'

    implementation 'org.jmonkeyengine:jme3-core:' + jme3Version
    runtimeOnly    'org.jmonkeyengine:jme3-desktop:' + jme3Version

    // RyzomConverter doesn't use jme3-jogg nor jme3-plugins
    //  -- they are included solely to avoid warnings from AssetConfig.
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-plugins:' + jme3Version
}

// cleanup tasks:

clean.dependsOn('cleanWrittenAssets')

tasks.register('cleanWrittenAssets', Delete) { // output directory
    delete 'assets/ryzom-assets/export'
}
